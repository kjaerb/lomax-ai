datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

enum COUNTRY {
  DENMARK
  SWEDEN
  UNKNOWN
}

model Company {
  id                   Int                 @id @default(autoincrement())
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  companyAccountNumber String              @unique
  companyAccountName   String              @unique
  npsAISegmentations   NPSAISegmentation[]
  country              COUNTRY             @default(UNKNOWN)
}

enum NPS_SOURCE {
  UNKNOWN
  NPS
  TRUSTPILOT
}

model NPSAISegmentation {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userRating     Int
  userComment    String
  surveySendTime DateTime
  segments       NPSSegment[]
  companyId      String?
  company        Company?     @relation(fields: [companyId], references: [companyAccountNumber])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  npsSource      NPS_SOURCE   @default(UNKNOWN)
  country        COUNTRY      @default(UNKNOWN)
}

enum SEGMENT_TYPE {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

model NPSSegment {
  id                  Int                @id @default(autoincrement())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  name                String
  npsGroupId          Int?
  npsGroup            NPSGroup?          @relation(fields: [npsGroupId], references: [id])
  npsAISegmentationId Int?
  npsAISegmentation   NPSAISegmentation? @relation(fields: [npsAISegmentationId], references: [id], onDelete: Cascade)
  type                SEGMENT_TYPE
}

model NPSGroup {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       @unique
  count       Int
  type        SEGMENT_TYPE
  npsSegments NPSSegment[]
  country     COUNTRY      @default(UNKNOWN)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum USER_ROLE {
  SUPER_ADMIN
  ADMIN
  USER
}

enum APPLICATION_ACCESS {
  NPS
}

model User {
  id             String               @id @default(cuid())
  createdAt      DateTime             @default(now())
  name           String?
  email          String?              @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  role           USER_ROLE            @default(USER)
  applications   APPLICATION_ACCESS[] @default([])
  accounts       Account[]
  sessions       Session[]
  aiSegmentation NPSAISegmentation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
