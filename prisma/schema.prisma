datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

model NPSAISegmentation {
  id                   Int          @id @default(autoincrement())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  companyAccountNumber String
  companyAccountName   String
  userRating           Int
  userComment          String
  surveySendTime       DateTime
  positiveComments     NPSSegment[] @relation("positiveComments")
  negativeComments     NPSSegment[] @relation("negativeComments")
  userId               String
  user                 User         @relation(fields: [userId], references: [id])
}

model NPSSegment {
  id                          Int                @id @default(autoincrement())
  createdAt                   DateTime           @default(now())
  updatedAt                   DateTime           @updatedAt
  name                        String
  npsGroupId                  Int?
  npsGroup                    NPSGroup?          @relation(fields: [npsGroupId], references: [id])
  npsAiSegmentationPositiveId Int?
  npsAiSegmentationPositive   NPSAISegmentation? @relation("positiveComments", fields: [npsAiSegmentationPositiveId], references: [id])
  npsAiSegmentationNegativeId Int?
  npsAiSegmentationNegative   NPSAISegmentation? @relation("negativeComments", fields: [npsAiSegmentationNegativeId], references: [id])
  type                        SegmentType
}

model NPSGroup {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String       @unique
  count      Int
  NPSSegment NPSSegment[]
}

enum SegmentType {
  Positive
  Negative
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String               @id @default(cuid())
  createdAt      DateTime             @default(now())
  name           String?
  email          String?              @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  role           USER_ROLE            @default(USER)
  applications   APPLICATION_ACCESS[]
  accounts       Account[]
  sessions       Session[]
  aiSegmentation NPSAISegmentation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum USER_ROLE {
  ADMIN
  USER
}

enum APPLICATION_ACCESS {
  NPS
}
